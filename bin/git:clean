#!/usr/bin/env ruby

require 'optparse'

options = {}

parser = OptionParser.new{ |opts|
  opts.banner = 'Usage: git:clean <prefix> [options]'

  opts.on('-t', '--test', 'Output the branches without cleaning them.') do |t|
    options[:test] = true
  end

  opts.on('--prune', '--[no-]prune', 'Prune remote repository first.') do |p|
    options[:prune] = p
  end

  options[:repository] = 'origin'
  opts.on \
    '-r',
    '--remote [REMOTE]',
    'Specify a remote repository (default origin).' do |remote|
    options[:repository] = remote
  end

  options[:local] = false
  opts.on \
    '-l',
    '--local',
    'Clean local repositories (default false).' do |local|
    options[:local] = true
  end
}

parser.parse!

if ARGV.empty?
  puts "You must specify a prefix"
  puts parser
  exit(-1)
end

prefix = ARGV.first

class BranchList
  def initialize(list, prefix)
    @list = list
      .split("\n")
      .map(&:strip)
      .select{ |u| u.start_with?(prefix) }
  end

  def test
    puts "Branches that would be deleted in a full run:"
    puts @list.map{ |b| "    #{b}" }
  end

  def remove
    puts "Removing branches..."
  end
end

class LocalBranchList < BranchList
  def initialize(prefix)
    super(`git branch --merged`, prefix)
  end

  def remove
    super
    @list.each{ |branch| system "git branch -d #{branch}" }
  end
end

class RemoteBranchList < BranchList
  def initialize(repository, prefix)
    @repository = repository

    super(`git branch -a --merged`, "#{repository_prefix}#{prefix}")

    @list = @list
      .map{ |branch| branch.gsub(repository_prefix, '') }
  end

  def remove
    super
    @list.each{ |branch| system "git push #{@repository} :#{branch}" }
  end

  private

  def repository_prefix
    "remotes/#{@repository}/"
  end
end

if options[:prune] && !options[:local]
  puts "Pruning #{options[:repository]}..."
  system "git remote prune #{options[:repository]}"
end

if options[:local]
  branches = LocalBranchList.new(prefix)
else
  branches = RemoteBranchList.new(options[:repository], prefix)
end

if options[:test]
  branches.test
else
  branches.remove
end
